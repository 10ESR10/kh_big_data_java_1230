CREATE TABLE DEPT_TCL
AS SELECT *
FROM DEPT;

SELECT * FROM DEPT_TCL;

INSERT INTO DEPT_TCL VALUES(50, 'DATABASE', 'SEOUL');
UPDATE DEPT_TCL SET  LOC = 'DALLAS'
WHERE DEPTNO = 40; 
DELETE FROM DEPT_TCL WHERE DNAME = 'RESEARCH';

COMMIT;

DESC EMP;
/*테이블을 새로 생성하는 방법*/
CREATE TABLE EMP_DDL (
EMPNO     NUMBER(4),
ENAME     VARCHAR2(10),
JOB       VARCHAR2(9),
MGR       NUMBER(4),
HIREDATE  DATE,
SAL       NUMBER(7, 2),
COMM      NUMBER(7, 2),
DEPTNO    NUMBER(2)


);

SELECT * FROM EMP_DDL;
/*기존 테이블의 열 구조와 데이터를 복사하여 새 테이블 생성하기*/
CREATE TABLE DEPT_DDL
AS SELECT * FROM DEPT;

SELECT * FROM DEPT_DDL;

/*기존 테이블의 열 구조만 복사하여 새 테이블 만들기*/
CREATE TABLE DEPT_DDL_TMP
AS SELECT * FROM DEPT
WHERE 1 != 1;

SELECT * FROM DEPT_DDL_TMP;

CREATE TABLE EMPDEPT_DDL
AS SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE,
E.SAL, E.COMM, D.DEPTNO, D.DNAME, D.LOC 
FROM EMP E, DEPT D
WHERE 1 !=1;

SELECT * FROM EMPDEPT_DDL;
/*
* DDL(데이터 정의어)
* CREATE : 테이블 생성
* ALTER : 테이블 변경 (ADD, RENAME, MODIFY, DROP)
* RENAME : 테이블 이름 변경
* TRUNCATE : 테이블 데이터 삭제
* DROP : 테이블 삭제
*/
/*테이블을 변경하는 ALTER: 테이블에 새 열을 추가 또는 삭제, 열의 자료형의 길이 변경 등을 수행*/
CREATE TABLE EMP_ALTER AS SELECT * FROM EMP;
SELECT * FROM EMP_ALTER;

-- 테이블에 새로운 열을 추가 : ADD, 추가된 열에 대한 행에는 NULL 값으로 입력 됨
ALTER TABLE EMP_ALTER 
ADD HP VARCHAR2(20);

-- 열 이름 변경 : RENAME
ALTER TABLE EMP_ALTER
RENAME COLUMN HP TO TEL;

-- 열의 자료형을 변경 : MODIFY, 자료형 변경 시 이미 해당 컬럼에 대한 행이 존재한다면 변경 안 될 수 있음
-- 기존의 자료형의 크기보다 크게 변경하는 건 문제 안 됨, 작게 변경시는 포함된 데이터에 영향을 받음
ALTER TABLE EMP_ALTER
 MODIFY EMPNO NUMBER(5);
 
 DESC EMP_ALTER;
 MODIFY EMPNO NUMBER(5);
 
 -- 특정 열을 삭제 할 때 : DROP (값이 있어도 날라감)
 ALTER TABLE EMP_ALTER
 DROP COLUMN MGR;

/* 테이블 이름을 변경하는 RENAME */
RENAME EMP_ALTER TO EMP_RENAME;
SELECT * FROM EMP_RENAME;

/* 테이블의 데이터를 삭제하는 TRUNCATE*/
-- 테이블의 모든 데이터를 삭제하는 명령, 테이블 구조에 영향을 주지 않으며, ROLLBACK 불가
TRUNCATE TABLE EMP_RENAME;

/* 테이블을 삭제하는 DROP*/
DROP TABLE EMP_RENAME;


CREATE TABLE EMP_HW (
EMPNO    NUMBER(4),
ENAME    VARCHAR2(10),
JOB      VARCHAR2(9),
MGR      NUMBER(4),
HIREDATE DATE,
SAL      NUMBER(7,2),
COMM     NUMBER(7,2),
DEPTNO   NUMBER(2)
);
SELECT * FROM EMP_HW;

ALTER TABLE EMP_HW
ADD BIGO   VARCHAR2(20);

ALTER TABLE EMP_HW
MODIFY BIGO  VARCHAR2(30);

INSERT INTO EMP_HW
SELECT EMPNO, ENAME, JOB, MGR, HIREDATE,SAL,COMM,DEPTNO,NULL
FROM EMP;

ALTER TABLE EMP_HW
RENAME COLUMN BIGO TO REMARK;

DROP TABLE EMP_HW;


/*제약 조건 : 테이블에 저장할 데이터를 제약하는 특수한 규칙을 의미합니다. 조건에 맞지 않는 데이터 저장 불가*/
-- 빈 값을 허용하지 않는 NOT NULL : 열에 대한 데이터의 중복 여부는 상관 없고 NULL 값을 허용하지 않음 (반드시 값이 입력 되어야 함)
CREATE  TABLE TABLE_NOTNULL(
 LOGIN_ID VARCHAR2(20) NOT NULL,
 LOGIN_PWD VARCHAR2(20) NOT NULL,
 TEL       VARCHAR2(20)
);
SELECT * FROM TABLE_NOTNULL;

INSERT INTO TABLE_NOTNULL(LOGIN_ID,LOGIN_PWD,TEL) VALUES('곰돌이사육사','SSS1111',010-1111-2222);
INSERT INTO TABLE_NOTNULL(LOGIN_ID,LOGIN_PWD,TEL) VALUES('지구오락실','123123',NULL);

/*중복되지 않는 값 : UNIQUE*/
-- 열에 저장할 데이터의 중복을 허용하지 않음, 

CREATE TABLE TABLE_UNIQUE(
 LOGIN_ID VARCHAR2(20) UNIQUE,
 LOGIN_PWD VARCHAR(20) NOT NULL,
 TEL VARCHAR(20)
 );
 INSERT INTO TABLE_UNIQUE(LOGIN_ID,LOGIN_PWD,TEL) VALUES('곰돌이사육사','SSS1111',010-1111-2222);
INSERT INTO TABLE_UNIQUE(LOGIN_ID,LOGIN_PWD,TEL) VALUES('곰돌이사육사','123123',NULL);

SELECT * FROM TABLE_UNIQUE;

CREATE TABLE TABLE_PK (
LONGIN_ID VARCHAR2(20) PRIMARY KEY,  -- UNIQUE와 NOT NULL 특성을 모두 가지고 있음
LOGIN_PWD VARCHAR(20) NOT NULL,
TEL  VARCHAR2(20)
);
INSERT INTO TABLE_PK(LOGIN_ID, LOGIN_PWD, TEL) VALUES('곰돌이사육사','SSS1111',010-1111-2222);
INSERT INTO TABLE_PK(LOGIN_ID, LOGIN_PWD, TEL) VALUES('지구오락실','123123',NULL);

SELECT * FROM TABLE_PK;

/*FOREIGN(외래)KEY 지정하기*/
-- FOREIGN(외래) KEY는 서로 다른 테이블간 관계를 정의하는데 사용하는 제약 조건
CREATE TABLE DEPT_FK(
DEPTNO    NUMBER(2) CONSTRAINT DEPTFK_DEPTNO_SPK PRIMARY KEY,
DNAME VARCHAR(14),
LOC    VARCHAR(13)
);
SELECT * FROM DEPT_FK;

CREATE TABLE EMP_FK(
EMPNO NUMBER(4) CONSTRAINT EMPFK_EMPNO_PK PRIMARY KEY,
ENAME VARCHAR2(10),
JOB VARCHAR2(9),
MGR NUMBER(4),
HIREDATE DATE,
SAL NUMBER (7,2),
COMM NUMBER (7,2),
DEPTNO NUMBER(2) CONSTRAINT EMPMK_DEPTNO_FK REFERENCES DEPT_FK(DEPTNO)
);

SELECT *FROM EMP_FK;

INSERT INTO DEPT_FK VALUES(10, '아이브', 'SEOUL');
INSERT INTO EMP_FK VALUES(9999, '안유진', '아이돌', NULL, SYSDATE, 3000, NULL, 10);

/* 데이터 형태와 범위를 정하는 CHECK */
CREATE TABLE TABLE_CHECK (
LOGIN_ID    VARCHAR2(20) CONSTRAINT TBLCK_LOGIN_PK PRIMARY KEY,
LOGIN_PWD VARCHAR(20) CONSTRAINT TBLCK_LOGINPW_CK CHECK (LENGTH(LOGIN_PWD)>3),
TEL VARCHAR2(20)
);

INSERT INTO TABLE_CHECK VALUES('지구오락실', '1234', '010-1234-5678');

/* 기본값을 지정하는 DEFAULT*/
CREATE TABLE TABLE_DEFAULT (
LOGIN_ID    VARCHAR2(20) CONSTRAINT TBLCK2_LOGINID_PK PRIMARY KEY,
LOGIN_PWD VARCHAR(20) DEFAULT '1234',
TEL VARCHAR2(20)
);
SELECT * FROM TABLE_DEFAULT;

INSERT INTO TABLE_DEFAULT VALUES('곰돌이',NULL,'010-1111-2222');
INSERT INTO TABLE_DEFAULT (LOGIN_ID, TEL) VALUES('곰돌이2','010-1111-3333');

CREATE TABLE TABLE_PRODUCT(
PRODUCT_ID NUMBER PRIMARY KEY,
PRODUCT_NAME VARCHAR2(20) NOT NULL,
REG_DATE DATE
);

INSERT INTO TABLE_PRODUCT  VALUES(1,'Computer','21/01/02');
INSERT INTO TABLE_PRODUCT  VALUES(2,'Smartphone','22/02/03');
INSERT INTO TABLE_PRODUCT  VALUES(3,'Television','22/07/01');

SELECT * FROM TABLE_PRODUCT;
ALTER TABLE TABLE_PRODUCT
ADD WEIGHT NUMBER CHECK (WEIGHT >=0);

ALTER TABLE TABLE_PRODUCT
ADD PRICE NUMBER CHECK (PRICE >=0);

CREATE TABLE CUSTOMER_TABLE(
CUSTOM_ID  NUMBER PRIMARY KEY,
USER_NAME  VARCHAR2(12) NOT NULL,
PHONE      VARCHAR(20),
EMAIL      VARCHAR(20),
REG_DATE    DATE DEFAULT'1900/01/01'
);

ALTER TABLE CUSTOMER_TABLE
ADD AGE  NUMBER CHECK (AGE BETWEEN 1 AND 199);

ALTER TABLE CUSTOMER_TABLE
ADD SEX VARCHAR2(1) CHECK(SEX= 'M' OR SEX = 'F');

ALTER TABLE CUSTOMER_TABLE
ADD BIRTH_DATE DATE;

ALTER TABLE CUSTOMER_TABLE
MODIFY PHONE UNIQUE
MODIFY EMAIL UNIQUE;

ALTER TABLE CUSTOMER_TABLE
RENAME  COLUMN  SEX TO GENDER;


/*데이터 사전*/
-- 오라클 데이터베이스 테이블은 사용자 테이블과 데이터 사전으로 나누어 집니다.
-- 데이터 사전에는 데이터베이스 메모리, 성능, 사용자, 권한, 객체 등 오라클
-- 데이터베이스 운영에 중요한 데이터가 보관되어 있습니다.
-- 데이터 사전 정보에 접근하거나 변경하는 등의 작업을 할 수 없고 오로지 정보 열람만 가능
SELECT * FROM DICT;
SELECT * FROM DICTIONARY;

-- 사용자가 소유한 객체 정보가 보관되어 있음
SELECT TABLE_NAME FROM USER_TABLES;

-- ALL_ 접두어를 가진 데이터 사전은 오라클 데이터베이스에 접속해있는 사용자가 소유한
-- 객체 및 다른 사용자가 소유한 객체 중 사용이 허락되어 있는 객체 정보
SELECT OWNER, TABLE_NAME
FROM ALL_TABLES;

-- DBA_ 접두어를 가진 데이터 사전은 데이터베이스 관리 권한을 가진 사용자만 조회할 수 있는
- 테이블로써 SCOTT 계정으로는 조회가 불가능
SELECT* FROM DBA_TABLES;

/*인덱스 : 오라클 데이터베이스에서 데이터 검색 성능의 향상을 위해 테이블 열에 사용하는 객체*/
SELECT ROWID, ENAME, EMPNO FROM EMP;

SELECT * FROM USER_INDEXES;

/* 인덱스 생성*/
-- 오라클 데이터베이스에서 자동으로 생성해주는 인덱스 외에 사용자가 직접 인덱스를 만들 때 사용
CREATE INDEX IDX_EMP_SAL ON EMP(SAL);

-- 생성된 인덱스 확인하기
SELECT * FROM USER_IND_COLUMNS;

-- 복합 인덱스 생성하기 : 두 개 이상의 컬럼으로 인덱스 생성(최대 32개까지 가능)
CREATE INDEX IDX_EMP_TUPLE ON EMP(JOB, DEPTNO);

-- 유니크(UNIQUE) 인덱스 생성 : 유니크(UNIQUE) 인덱스를 생성하면 인덱스 지정된 컬럼은
--해당 테이블에서 유일한 값이어야 합니다. (꼭 필요한 경우가 아니면 사용하지 말 것)
CREATE UNIQUE INDEX IDX_RMP_UK ON EMP(EMPNO,MGR);

-- 인덱스 삭제 :DROP 
DROP INDEX IDX_EMP_SAL;

/*VIEW : 가상 테이블을 뷰라고 부릅니다. 뷰는 하나 이상의 테이블을 조회하는 SELECT문을 저장한 객체*/
-- 뷰는 복잡한 쿼리를 단순화 할 수 잇습니다.
-- 사용자에게 필요한 정보만 접근하도록 접근을 제한 할 수 있습니다.
CREATE VIEW VW_EMP20 
AS(SELECT EMPNO, ENAME, JOB, DEPTNO
FROM EMP
WHERE DEPTNO =20);

SELECT * FROM BW_EMP20;

/* 단순 뷰 생성하기*/
-- 단순 뷰는 단일 테이블에 필요한 컬럼을 나열 한 것(GROUP BY, UNION 사용하지 않음)
-- 단순 뷰는 SELECT, INSERT, UPDATE, DELETE를 자유롭게 사용 가능
CREATE VIEW V_EMP
AS (SELECT EMPNO, ENMAE, JOB, HIREDATE
    FROM EMP);
    
    SELECT * FROM V_EMP;

DROP VIEW VW_EMP20;

/*인라인뷰를 사용한 TOP-N SQL 문*/
-- TOP-N 쿼리란 데이터베이스에서 가장 큰 N개의 값을 검색하는 쿼리를 의미합니다.
-- ROWNUM을 추가로 조회하기
SELECT ROWNUM, EMP.*
FROM EMP ;

-- 인라인뷰 (서브쿼리 이용)
SELECT ROWNUM, E.*
FROM (SELECT *
FROM EMP E
ORDER BY SAL DESC) E;

-- 인라인뷰로 TOP-N 추출하기
SELECT ROWNUM, E.*
FROM (SELECT *
FROM EMP E
ORDER BY SAL DESC) E
WHERE ROWNUM <=3;

/*VIEW를 통한 DML문 실행*/
CREATE VIEW EMP_COPY_VIEW
AS SELECT EMPNO,ENAME, DEPTNO
FROM EMP;

SELECT * FROM EMP_COPY_VIEW;

INSERT INTO EMP_COPY_VIEW VALUES(9999, '곰돌이', 30);

UPDATE EMP_COPY_VIEW
SET DEPTNO = 20
WHERE EMPNO= 9999;

DELETE FROM EMP_COPY_VIEW WHERE EMPNO=9999;









